function expand(e,t){var n=expand.semantics.expand.bind(expand.semantics);return n(e,t,n)}var Set=require("collections/set"),Map=require("collections/map"),Operators=require("./operators");module.exports=expand,expand.semantics={reflexive:Set(["literal","element","rangeContent","mapContent"]),traverseLeft:Set(["with","mapBlock","filterBlock","someBlock","everyBlock","sortedBlock","groupBlock","groupMapBlock"]),traverseAll:Set(["if","tuple","property","get","has","map","filter","some","every","sorted","one","only","enumerate","flatten","reversed","view","order","sum","average","min","max","keys","values","items","evaluate","parent"]).addEach(Object.keys(Operators)),expanders:Map({value:function(e,t){return t.value||{type:"value"}},parameters:function(e,t){return t.parameters||{type:"parameters"}},record:function(e,t,n){var a={type:"record",args:[]};for(var s in e.args)a.args[s]=n(e.args[s],t,n);return a},component:function(e,t){return t.components&&e.component?{type:"component",label:t.components.getObjectLabel(e.component)}:e}}),expand:function(e,t,n){return this.expanders.has(e.type)?this.expanders.get(e.type)(e,t,n):this.traverseLeft.has(e.type)?{type:e.type,args:[n(e.args[0],t,n)].concat(e.args.slice(1))}:this.reflexive.has(e.type)?e:{type:e.type,args:e.args.map(function(e){return n(e,t,n)})}}};