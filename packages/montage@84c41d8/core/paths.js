var Montage=require("core/core").Montage,WeakMap=require("collections/weak-map"),Map=require("collections/map"),parse=require("frb/parse"),evaluate=require("frb/evaluate"),assign=require("frb/assign"),observe=require("frb/observe"),bind=require("frb/bind"),compileObserver=require("frb/compile-observer"),Scope=require("frb/scope"),Observers=require("frb/observers"),autoCancelPrevious=Observers.autoCancelPrevious,pathChangeDescriptors=new WeakMap,pathPropertyDescriptors={getPath:{value:function(e,n,s,a){return evaluate(e,this,n||this,s,a)}},setPath:{value:function(e,n,s,a,t){return assign(this,e,n,s||this,a,t)}},observePath:{value:function(e,n){var s=parse(e),a=compileObserver(s);return a(autoCancelPrevious(n),new Scope(this))}},addRangeAtPathChangeListener:{value:function(e,n,s){function a(e,a,t){if(n[s])n[s](e,a,t);else{if(!n.call)throw Error("Can't dispatch range change to "+n);n.call(null,e,a,t)}}s=s||"handleRangeChange";var t=[];return this.addPathChangeListener(e,function(e){return e=e||[],a(e.slice(),t.slice(),0),t=e,e.addRangeChangeListener(a)})}},getPathChangeDescriptors:{value:function(){return pathChangeDescriptors.has(this)||pathChangeDescriptors.set(this,{}),pathChangeDescriptors.get(this)}},getPathChangeDescriptor:{value:function(e,n,s){var a=Montage.getPathChangeDescriptors.call(this);return Object.owns(a,e)||(a[e]={willChangeListeners:new Map,changeListeners:new Map}),a=a[e],a=s?a.willChangeListeners:a.changeListeners,a.has(n)||a.set(n,{path:e,handler:n,beforeChange:s,cancel:Function.noop}),a.get(n)}},addPathChangeListener:{value:function(e,n,s,a){var t=this;n=n||Function.noop;var o=Montage.getPathChangeDescriptor.call(this,e,n,a);o.cancel();var p,i,l,r=parse(e);if(n===Function.noop)l=function(n){if(i)throw Error("Path change handler needs a handler because it emits new values when the source changes: "+JSON.stringify(e));i=!0,p=n};else if(s)l=function(a){return n[s].call(n,a,e,t)};else if(n.handlePathChange)l=function(s){return n.handlePathChange.call(n,s,e,t)};else{if("function"!=typeof n)throw Error("Can't recognize handler type: "+n+". Must be function or delegate implementing handlePathChange.");l=function(s){return n.call(t,s,e,t)}}var c=compileObserver(r),h=c(autoCancelPrevious(l),new Scope(this));return o.cancel=h,i?p:h}},removePathChangeListener:{value:function(e,n,s){n=n||Function.noop;var a=Montage.getPathChangeDescriptors.call(this),t=s?"willChangeListeners":"changeListeners";if(!Object.owns(a,e))throw Error("Can't find "+t+" for "+JSON.stringify(e));var o=a[e],p=o[t];if(!p.has(n))throw Error("Can't find "+t+" for "+JSON.stringify(e));var i=p.get(n);i.cancel(),p["delete"](n),0===o.willChangeListeners.length&&0===o.changeListeners.length&&delete a[e];for(var l in a)return;pathChangeDescriptors["delete"](this)}},addBeforePathChangeListener:{value:function(e,n,s){return Montage.addPathChangeListener.call(this,e,n,s,!0)}},removeBeforePathChangeListener:{value:function(e,n){return Montage.removePathChangeListener.call(this,e,n,!0)}}};Montage.defineProperties(Montage,pathPropertyDescriptors),Montage.defineProperties(Montage.prototype,pathPropertyDescriptors);